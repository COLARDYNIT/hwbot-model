package be.colardyn_it.model;

// Generated Apr 14, 2009 1:32:23 PM by Hibernate Tools 3.2.2.GA


import be.colardyn_it.util.StringUtil;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.NoArgsConstructor;
import lombok.ToString;
import org.hibernate.annotations.NotFound;
import org.hibernate.annotations.NotFoundAction;
import org.hibernate.annotations.Type;
import org.hibernate.validator.constraints.Length;

import javax.persistence.*;
import javax.validation.constraints.NotNull;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import static javax.persistence.GenerationType.IDENTITY;

/**
 * Team generated by hbm2java
 */
@Entity
@Table(name = "team", uniqueConstraints = @UniqueConstraint(columnNames = "TEAMNAME"))
@Builder
@NoArgsConstructor
@AllArgsConstructor
@ToString
public class Team implements java.io.Serializable {

    private Integer teamId;
    private String teamname;
    private String description;
    private String website;
    private Date dateJoined;
    private int donations;
    private Country country;
    private int subscriptionType;
    private String subscriptionPassword;
    private String safename;
    private boolean competitionOnly;
    private boolean proOc;
    private Set<User> users = new HashSet<User>(0);

    @PrePersist
    @PreUpdate
    public void checkSafeName() {
        this.safename = StringUtil.makeUrlSafe(teamname);
    }

    @Id
    @GeneratedValue(strategy = IDENTITY)
    @Column(name = "TEAM_ID", unique = true, nullable = false)
    public Integer getTeamId() {
        return this.teamId;
    }

    public void setTeamId(Integer teamId) {
        this.teamId = teamId;
    }


    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "COUNTRY_ID", nullable = true)
    @NotFound(action = NotFoundAction.IGNORE)
    public Country getCountry() {
        return this.country;
    }

    public void setCountry(Country country) {
        this.country = country;
    }

    @Column(name = "TEAMNAME", unique = true, nullable = false, length = 30)
    @NotNull
    @Length(max = 30)
    public String getTeamname() {
        return this.teamname;
    }

    public void setTeamname(String teamname) {
        this.teamname = teamname;
    }

    @Column(name = "DESCRIPTION", length = 200)
    @Length(max = 200)
    public String getDescription() {
        return this.description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    @Column(name = "WEBSITE", length = 100)
    @Length(max = 100)
    public String getWebsite() {
        return this.website;
    }

    public void setWebsite(String website) {
        this.website = website;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "DATE_JOINED", length = 23)
    public Date getDateJoined() {
        return this.dateJoined;
    }

    public void setDateJoined(Date dateJoined) {
        this.dateJoined = dateJoined;
    }

    @Column(name = "DONATIONS", nullable = false)
    @NotNull
    public int getDonations() {
        return this.donations;
    }

    public void setDonations(int donations) {
        this.donations = donations;
    }

    @Column(name = "SUBSCRIPTION_TYPE", nullable = false)
    @NotNull
    public int getSubscriptionType() {
        return this.subscriptionType;
    }

    public void setSubscriptionType(int subscriptionType) {
        this.subscriptionType = subscriptionType;
    }

    @Column(name = "SUBSCRIPTION_PASSWORD", length = 50)
    @Length(max = 50)
    public String getSubscriptionPassword() {
        return this.subscriptionPassword;
    }

    public void setSubscriptionPassword(String subscriptionPassword) {
        this.subscriptionPassword = subscriptionPassword;
    }


    @OneToMany(cascade = {CascadeType.MERGE, CascadeType.PERSIST, CascadeType.REFRESH}, fetch = FetchType.LAZY, mappedBy = "team")
    public Set<User> getUsers() {
        return this.users;
    }

    public void setUsers(Set<User> users) {
        this.users = users;
    }


    @Column(name = "pro_oc_team")
    @Type(type = "yes_no")
    public boolean getProOc() {
        return proOc;
    }

    public void setProOc(boolean proOc) {
        this.proOc = proOc;
    }

    @Column(name = "competition_team")
    @Type(type = "yes_no")
    public boolean getCompetitionOnly() {
        return competitionOnly;
    }

    public void setCompetitionOnly(boolean competitionOnly) {
        this.competitionOnly = competitionOnly;
    }

    @Column(name = "safe_name", unique = true, nullable = false, length = 30)
    @NotNull
    @Length(max = 30)
    public String getSafename() {
        return this.safename;
    }

    public void setSafename(String safename) {
        this.safename = safename;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((teamId == null) ? 0 : teamId.hashCode());
        result = prime * result + ((teamname == null) ? 0 : teamname.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        Team other = (Team) obj;
        if (teamId == null) {
            if (other.teamId != null) {
                return false;
            }
        } else if (!teamId.equals(other.teamId)) {
            return false;
        }
        if (teamname == null) {
            if (other.teamname != null) {
                return false;
            }
        } else if (!teamname.equals(other.teamname)) {
            return false;
        }
        return true;
    }

}
