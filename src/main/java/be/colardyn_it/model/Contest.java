package be.colardyn_it.model;

// Generated Jul 23, 2009 9:36:51 PM by Hibernate Tools 3.2.2.GA

import be.colardyn_it.util.StringUtil;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.NoArgsConstructor;
import lombok.ToString;
import org.hibernate.annotations.NotFound;
import org.hibernate.annotations.NotFoundAction;
import org.hibernate.annotations.Type;

import javax.persistence.*;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import static javax.persistence.GenerationType.IDENTITY;

/**
 * Contest generated by hbm2java
 */
@Entity
@Table(name = "contest", uniqueConstraints = {@UniqueConstraint(columnNames = "SAFE_NAME"), @UniqueConstraint(columnNames = "NAME")})
@Builder
@NoArgsConstructor
@AllArgsConstructor
@ToString
public class Contest implements java.io.Serializable {

    private static final long serialVersionUID = 1L;
    private Integer contestId;
    private Date startdate;
    private Date enddate;
    private String name;
    private String safeName;
    private Boolean published;
    private Integer level = 0;
    private Boolean hidden;
    private String competitorType;
    private String externalurl;
    private String description;
    private String excerptLead;
    private String excerpt;
    private String email;
    private String password;
    private Integer daysHiddenBeforeStart;
    private Boolean event = false;
    private Boolean notHosted = false;
    private Boolean challenge = false;
    private Boolean focus = false;
    private String css;
    private String inlineCss;
    private String partnerImage;
    private String twitterHash;
    private transient Contest parentContest;
    private ContestTag tag;
    private String prizes;
    private String rules;
    private Boolean featured;
    private Boolean openParticipation;
    private String contestVisual;
    private String esportsBanner;
    private String shortName;

    private Set<ContestModerator> contestModerators = new HashSet<ContestModerator>(0);
    private Set<ContestUser> contestUsers = new HashSet<ContestUser>(0);
    private Set<ContestTeam> contestTeams = new HashSet<ContestTeam>(0);
    private Set<ContestBenchmark> contestBenchmarks = new HashSet<ContestBenchmark>(0);
    private Set<ContestAchievement> contestAchievements = new HashSet<ContestAchievement>(0);
    private Set<ContestLimitation> contestLimitations = new HashSet<ContestLimitation>(0);

    @PrePersist
    @PreUpdate
    public void checkSafeName() {
        this.safeName = StringUtil.makeUrlSafe(name);
    }

    @Id
    @GeneratedValue(strategy = IDENTITY)
    @Column(name = "CONTEST_ID", unique = true, nullable = false)
    public Integer getContestId() {
        return this.contestId;
    }

    public void setContestId(Integer contestId) {
        this.contestId = contestId;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "STARTDATE", nullable = false, length = 23)
    @NotNull
    public Date getStartdate() {
        return this.startdate;
    }

    public void setStartdate(Date startdate) {
        this.startdate = startdate;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "ENDDATE", nullable = false, length = 23)
    @NotNull
    public Date getEnddate() {
        return this.enddate;
    }

    public void setEnddate(Date enddate) {
        this.enddate = enddate;
    }

    @Column(name = "NAME", unique = true, nullable = false)
    @NotNull
    public String getName() {
        return this.name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @Column(name = "SAFE_NAME", unique = true, nullable = false, length = 255)
    @NotNull
    @Size(max = 255)
    public String getSafeName() {
        return this.safeName;
    }

    public void setSafeName(String simplename) {
        this.safeName = simplename;
    }

    @Column(name = "PUBLISHED", nullable = false)
    @Type(type = "yes_no")
    @NotNull
    public Boolean getPublished() {
        return this.published;
    }

    public void setPublished(Boolean published) {
        this.published = published;
    }

    @Column(name = "LEVEL")
    public Integer getLevel() {
        return this.level;
    }

    public void setLevel(Integer level) {
        this.level = level;
    }

    @Column(name = "HIDDEN", nullable = false)
    @Type(type = "yes_no")
    @NotNull
    public Boolean getHidden() {
        return this.hidden;
    }

    public void setHidden(Boolean hidden) {
        this.hidden = hidden;
    }

    @Column(name = "COMPETITOR_TYPE", nullable = false, length = 20)
    @NotNull
    @Size(max = 20)
    public String getCompetitorType() {
        return this.competitorType;
    }

    public void setCompetitorType(String competitorType) {
        this.competitorType = competitorType;
    }

    @Column(name = "EXTERNALURL")
    public String getExternalurl() {
        return this.externalurl;
    }

    public void setExternalurl(String externalurl) {
        this.externalurl = externalurl;
    }

    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "contest")
    public Set<ContestModerator> getContestModerators() {
        return this.contestModerators;
    }

    public void setContestModerators(Set<ContestModerator> contestModerators) {
        this.contestModerators = contestModerators;
    }

    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "contest")
    public Set<ContestUser> getContestUsers() {
        return this.contestUsers;
    }

    public void setContestUsers(Set<ContestUser> contestUsers) {
        this.contestUsers = contestUsers;
    }

    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "contest")
    public Set<ContestTeam> getContestTeams() {
        return this.contestTeams;
    }

    public void setContestTeams(Set<ContestTeam> contestTeams) {
        this.contestTeams = contestTeams;
    }

    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "contest")
    public Set<ContestBenchmark> getContestBenchmarks() {
        return this.contestBenchmarks;
    }

    public void setContestBenchmarks(Set<ContestBenchmark> contestBenchmarks) {
        this.contestBenchmarks = contestBenchmarks;
    }

    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "contest")
    public Set<ContestAchievement> getContestAchievements() {
        return this.contestAchievements;
    }

    public void setContestAchievements(Set<ContestAchievement> contestAchievements) {
        this.contestAchievements = contestAchievements;
    }


    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "contest")
    public Set<ContestLimitation> getContestLimitations() {
        return this.contestLimitations;
    }

    public void setContestLimitations(Set<ContestLimitation> contestLimitations) {
        this.contestLimitations = contestLimitations;
    }

    @Column(columnDefinition = "longtext")
    @Lob
    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    @Column(name = "EXCERPT", columnDefinition = "longtext")
    @Lob
    public String getExcerpt() {
        return excerpt;
    }

    public void setExcerpt(String excerpt) {
        this.excerpt = excerpt;
    }

    @Column(name = "EXCERPT_LEAD", columnDefinition = "longtext")
    @Lob
    public String getExcerptLead() {
        return excerptLead;
    }

    public void setExcerptLead(String excerptLead) {
        this.excerptLead = excerptLead;
    }


    @Column(name = "EMAIL")
    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    @Column(name = "PASSWORD", nullable = false)
    // @NotNull
    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    @Column(name = "days_hidden_before_start", nullable = true)
    public Integer getDaysHiddenBeforeStart() {
        return daysHiddenBeforeStart;
    }

    public void setDaysHiddenBeforeStart(Integer daysHiddenBeforeStart) {
        this.daysHiddenBeforeStart = daysHiddenBeforeStart;
    }

    @Column(name = "event")
    @Type(type = "yes_no")
    //  @NotNull
    public Boolean getEvent() {
        return event;
    }

    public void setEvent(Boolean event) {
        this.event = event;
    }

    @Column(name = "not_hosted")
    @Type(type = "yes_no")
    // @NotNull
    public Boolean getNotHosted() {
        return notHosted;
    }

    public void setNotHosted(Boolean notHosted) {
        this.notHosted = notHosted;
    }

    @Column(name = "challenge")
    @Type(type = "yes_no")
    //  @NotNull
    public Boolean getChallenge() {
        return challenge;
    }

    public void setChallenge(Boolean challenge) {
        this.challenge = challenge;
    }

    @Column(name = "focus")
    @Type(type = "yes_no")
    //   @NotNull
    public Boolean getFocus() {
        return focus;
    }

    public void setFocus(Boolean focus) {
        this.focus = focus;
    }

    @Column(name = "css", nullable = true)
    public String getCss() {
        return css;
    }

    public void setCss(String css) {
        this.css = css;
    }

    @Column(name = "inline_css", nullable = true)
    public String getInlineCss() {
        return inlineCss;
    }

    public void setInlineCss(String inlineCss) {
        this.inlineCss = inlineCss;
    }

    @Column(name = "partner_image", nullable = true)
    public String getPartnerImage() {
        return partnerImage;
    }

    public void setPartnerImage(String partnerImage) {
        this.partnerImage = partnerImage;
    }

    @Column(name = "twitter_hash", nullable = true)
    public String getTwitterHash() {
        return twitterHash;
    }

    public void setTwitterHash(String twitterHash) {
        this.twitterHash = twitterHash;
    }

    // uncomment when 4.6.9 is in production
    @ManyToOne(optional = true)
    @JoinColumn(name = "parent_contest_id", referencedColumnName = "contest_id")
    public Contest getParentContest() {
        return parentContest;
    }

    public void setParentContest(Contest parentContest) {
        this.parentContest = parentContest;
    }

    @ManyToOne(fetch = FetchType.LAZY, optional = true)
    @JoinColumn(name = "tag_id")
    @NotFound(action = NotFoundAction.IGNORE)
    public ContestTag getTag() {
        return this.tag;
    }

    public void setTag(ContestTag tag) {
        this.tag = tag;
    }


    @Column(name = "prizes")
    @Size(max = 2000)
    public String getPrizes() {
        return prizes;
    }

    public void setPrizes(String prizes) {
        this.prizes = prizes;
    }
    @Column(name = "rules")
    @Size(max = 3000)
    public String getRules() {
        return rules;
    }

    public void setRules(String rules) {
        this.rules = rules;
    }
    @Column(name = "featured")
    @Type(type = "yes_no")
    public Boolean getFeatured() {
        return featured;
    }

    public void setFeatured(Boolean featured) {
        this.featured = featured;
    }
    @Column(name = "open_participation")
    @Type(type = "yes_no")
    public Boolean getOpenParticipation() {
        return openParticipation;
    }

    public void setOpenParticipation(Boolean openParticipation) {
        this.openParticipation = openParticipation;
    }
    @Column(name = "contest_visual")
    public String getContestVisual() {
        return contestVisual;
    }

    public void setContestVisual(String contestVisual) {
        this.contestVisual = contestVisual;
    }
    @Column(name = "esports_banner")
    public String getEsportsBanner() {
        return esportsBanner;
    }

    public void setEsportsBanner(String esportsBanner) {
        this.esportsBanner = esportsBanner;
    }
    @Column(name = "short_name")
    @Size(max = 50)
    public String getShortName() {
        return shortName;
    }

    public void setShortName(String shortName) {
        this.shortName = shortName;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((contestId == null) ? 0 : contestId.hashCode());
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        Contest other = (Contest) obj;
        if (contestId == null) {
            if (other.contestId != null) {
                return false;
            }
        } else if (!contestId.equals(other.contestId)) {
            return false;
        }
        if (name == null) {
            if (other.name != null) {
                return false;
            }
        } else if (!name.equals(other.name)) {
            return false;
        }
        return true;
    }

}
