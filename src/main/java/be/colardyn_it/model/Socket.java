package be.colardyn_it.model;

// Generated Apr 14, 2009 1:43:35 PM by Hibernate Tools 3.2.2.GA


import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.NoArgsConstructor;
import lombok.ToString;
import org.hibernate.annotations.NotFound;
import org.hibernate.annotations.NotFoundAction;
import org.hibernate.validator.constraints.Length;

import javax.persistence.*;
import java.util.HashSet;
import java.util.Set;

import static javax.persistence.GenerationType.IDENTITY;

/**
 * Socket generated by hbm2java
 */
@Entity
@Table(name = "socket", uniqueConstraints = @UniqueConstraint(columnNames = "NAME"))
@Builder
@ToString
@AllArgsConstructor
@NoArgsConstructor
public class Socket implements java.io.Serializable {

    public static final String SOCKET_TYPE_VIDEOCARD = "videocard";
    public static final String SOCKET_TYPE_PROCESSOR = "processor";

    private Integer socketId;
    private String name;
    private String type;
    private Set<MbModel> mbModels = new HashSet<MbModel>(0);

    @Id
    @GeneratedValue(strategy = IDENTITY)
    @Column(name = "SOCKET_ID", unique = true, nullable = false)
    public Integer getSocketId() {
        return this.socketId;
    }

    public void setSocketId(Integer socketId) {
        this.socketId = socketId;
    }

    @Column(name = "NAME", unique = true, length = 50)
    @Length(max = 50)
    public String getName() {
        return this.name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @Column(name = "socket_type", length = 20)
    @Length(max = 20)
    public String getType() {
        return this.type;
    }

    public void setType(String type) {
        this.type = type;
    }

    @OneToMany(cascade = {CascadeType.MERGE, CascadeType.PERSIST, CascadeType.REFRESH}, fetch = FetchType.LAZY, mappedBy = "socket")
    @NotFound(action = NotFoundAction.IGNORE)
    public Set<MbModel> getMbModels() {
        return this.mbModels;
    }

    public void setMbModels(Set<MbModel> mbModels) {
        this.mbModels = mbModels;
    }

}
