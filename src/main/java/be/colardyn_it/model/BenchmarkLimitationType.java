package be.colardyn_it.model;

// Generated Jul 23, 2009 9:36:51 PM by Hibernate Tools 3.2.2.GA

import org.apache.commons.lang3.StringUtils;
import org.hibernate.annotations.Type;
import org.hibernate.validator.constraints.Length;

import javax.persistence.*;
import javax.validation.constraints.NotNull;
import java.util.*;

import static javax.persistence.GenerationType.IDENTITY;


/**
 * BenchmarkLimitationType generated by hbm2java
 */
@Entity
@Table(name = "benchmark_limitation_type", uniqueConstraints = @UniqueConstraint(columnNames = "NAME"))
public class BenchmarkLimitationType implements java.io.Serializable {

    private Integer typeId;
    private String name;
    private String description;
    private String configurationKeys;
    private Boolean visible;
    private String type;
    private Set<BenchmarkLimitation> benchmarkLimitations = new HashSet<BenchmarkLimitation>(0);

    public BenchmarkLimitationType() {
    }

    public BenchmarkLimitationType(String name, String description, Boolean visible) {
        this.name = name;
        this.description = description;
        this.visible = visible;
    }

    public BenchmarkLimitationType(String name, String description, Boolean visible, String type,
                                   Set<BenchmarkLimitation> benchmarkLimitations) {
        this.name = name;
        this.description = description;
        this.visible = visible;
        this.type = type;
        this.benchmarkLimitations = benchmarkLimitations;
    }

    @Transient
    public List<String> getConfigurationKeysAsList() {
        if (StringUtils.isNotEmpty(configurationKeys)) {
            List<String> keys = new ArrayList<String>();
            String[] split = StringUtils.split(configurationKeys, ",");
            for (String key : split) {
                keys.add(key.trim());
            }
            System.out.println("keys: " + keys);
            return keys;
        } else {
            return Collections.emptyList();
        }
    }

    @Id
    @GeneratedValue(strategy = IDENTITY)
    @Column(name = "TYPE_ID", unique = true, nullable = false)
    public Integer getTypeId() {
        return this.typeId;
    }

    public void setTypeId(Integer typeId) {
        this.typeId = typeId;
    }

    @Column(name = "NAME", unique = true, nullable = false)
    @NotNull
    public String getName() {
        return this.name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @Column(name = "DESCRIPTION", nullable = false)
    @NotNull
    public String getDescription() {
        return this.description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    @Column(name = "CONFIGURATION_KEYS", nullable = true)
    public String getConfigurationKeys() {
        return this.configurationKeys;
    }

    public void setConfigurationKeys(String keys) {
        this.configurationKeys = keys;
    }

    @Column(name = "VISIBLE", nullable = false)
    @NotNull
    @Type(type = "yes_no")
    public Boolean getVisible() {
        return this.visible;
    }

    public void setVisible(Boolean visible) {
        this.visible = visible;
    }

    @Column(name = "TYPE", length = 40)
    @Length(max = 40)
    public String getType() {
        return this.type;
    }

    public void setType(String type) {
        this.type = type;
    }

    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "benchmarkLimitationType")
    public Set<BenchmarkLimitation> getBenchmarkLimitations() {
        return this.benchmarkLimitations;
    }

    public void setBenchmarkLimitations(Set<BenchmarkLimitation> benchmarkLimitations) {
        this.benchmarkLimitations = benchmarkLimitations;
    }

}
